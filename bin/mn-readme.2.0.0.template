const String = mrequire("core:Data.Native.String:1.0.1");


const identity = x => x;


const compose = (f1, f2) => x =>
    f1(f2(x));


const functionName = signature => {
    const prefix = String.indexOf("::")(signature).reduce(
        () => identity)(
        i => compose(String.trim, String.substring(0)(i))) (signature);

    return String.indexOf("=>")(prefix).reduce(
        () => identity)(
        i => compose(String.trim, String.substringFrom(i + 2))) (prefix);
};


const parseImportName = importText => {
    const indexOfFirstColon = String.indexOf(":")(importText).reduce(() => -1)(v => v);
    const indexOfSecondColon = String.indexOfFrom(":")(indexOfFirstColon + 1)(importText).reduce(() => -1)(v => v);

    return (indexOfFirstColon === -1) || (indexOfSecondColon === -1)
        ? {type: "core", name: importText, version: ""}
        : {
            type: String.substring(0)(indexOfFirstColon)(importText),
            name: String.substring(indexOfFirstColon + 1)(indexOfSecondColon)(importText),
            version: String.substringFrom(indexOfSecondColon + 1)(importText)
          };
};


%%% moduleName source
> source.header.content.forEach(line => {
<% line %>
> });

> source.functions.content.forEach(func => {
>   if (func.signature.isJust()) {
### <% functionName(func.signature.withDefault()) %>

```haskell
<% func.signature.withDefault() %>
```

>       func.header.content.forEach(line => {
<% line %>
>       });

>       if (func.assumptions.length() > 0) {
#### Examples:

```haskell
>           func.assumptions.content.forEach(assumption => {
<% assumption %>
>           });
```

>       }
>   }
> });

> if (source.imports.length() > 0) {
## Dependencies

>   source.imports.content.forEach(importText => {
>       const parsedImport = parseImportName(importText);
* [<% parsedImport.name %> (<% parsedImport.version %>)](https://github.com/graeme-lockley/mn-<% parsedImport.name%>)
>   });
> }